# -*- coding: utf-8 -*-
"""minorproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vwEhSGBrXOUBxCnlSEiCHwcJi_4UJrM4
"""

import pandas as pd

train_data = pd.read_csv('/content/data (1).csv')

train_data['Size of Silver']

train_data["category1"] = pd.cut(train_data['Size of Silver'], bins=[0, 5, 10, 15, 20, 25, 30], labels=['0-5', '5-10', '10-15', '15-20', '20-25', '25-30'])

train_data

import numpy as np
dataset = pd.DataFrame(train_data['Temperature'])
dataset["AgNO"] = train_data['AgNO']
dataset

inputs = dataset.to_numpy()

# Class for Layers
class Layer_Dense:
  def __init__(self, n_inputs, n_neurons):
    self.weights = 0.1 * np.random.randn(n_inputs, n_neurons) # pass the size of each input list, also, we want it to create weights
    # this will create a 2D array having 8 randomly generated values
    self.biases = np.zeros((1, n_neurons))
  def forward(self, inputs):
    self.output = np.dot(inputs, self.weights)+self.biases

# ReLU Activation Function
class Activation_ReLU:
  def forward(self, inputs):
    self.output = np.maximum(0, inputs)

# Softmax Function
class Activation_Softmax:
  def forward(self, inputs):
    exp_values = np.exp(inputs - np.max(inputs, axis = 1, keepdims = True))
    probabilities = exp_values / np.sum(exp_values, axis = 1, keepdims = True)
    self.output = probabilities

# calculating loss
class Loss:
  def calculate(self, output, y):
    sample_losses = self.forward(output,y)
    data_loss = np.mean(sample_losses)
    return data_loss

# calculating loss categorical cross entropy
class Loss_CategoricalCrossentropy(Loss):
  def forward(self, y_pred, y_true):
    samples = len(y_pred)
    y_pred_clipped = np.clip(y_pred, 1e-7, 1-1e-7)
    # works for both one hot encoding methods and scalar class values
    if len(y_true.shape) == 1:
      correct_confidences = y_pred_clipped[range(samples), y_true]
    elif len(y_true.shape) == 2:
      correct_confidences = np.sum(y_pred_clipped*y_true, axis = 1)
    negative_log_likelihoods = -np.log(correct_confidences)
    return negative_log_likelihoods


class Predict:
  def prediction(self, inputs):
    dense1 = Layer_Dense(2,4)
    activation1 = Activation_ReLU()
    dense2 = Layer_Dense(4,6)
    activation2 = Activation_Softmax()
    dense3 = Layer_Dense(6,2)
    activation3 = Activation_Softmax()
    dense1.forward(inputs)
    activation1.forward(dense1.output)
    dense2.forward(activation1.output)
    activation2.forward(dense2.output)
    dense3.forward(activation2.output)
    activation3.forward(dense3.output)
    return activation3.output

temperature = float(input())
AgNO = float(input())
input = []
input.append(temperature)
input.append(AgNO)
predict1 = Predict()
output = predict1.prediction(input)
print(output)
if output[0][0] > output[0][1]:
  print('size > 15')
else:
  print('size < 15')